<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\factory2_2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\factory2_2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Mar 05 15:04:32 2015
<BR><P>
<H3>Maximum Stack Usage =        664 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; loop &rArr; send_packet() &rArr; WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[314]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[98]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from dingke_exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from dingke_exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from dingke_exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from dingke_timer.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from dingke_timer.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from dingke_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from dingke_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from dingke_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from dingke_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9]">USBD_DataInStage</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[8]">USBD_DataOutStage</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[f]">USBD_IsoINIncomplete</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[10]">USBD_IsoOUTIncomplete</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[c]">USBD_Reset</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[e]">USBD_Resume</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[b]">USBD_SOF</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[a]">USBD_SetupStage</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[d]">USBD_Suspend</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from dingke_wdg.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[76]">__sti___10_WaspSD_cpp_eb126f29</a> from waspsd.o(.text) referenced from waspsd.o(.init_array)
 <LI><a href="#[74]">__sti___11_WaspPWR_cpp_3d17e4d9</a> from wasppwr.o(.text) referenced from wasppwr.o(.init_array)
 <LI><a href="#[75]">__sti___11_WaspRTC_cpp_719c396c</a> from wasprtc.o(.text) referenced from wasprtc.o(.init_array)
 <LI><a href="#[7a]">__sti___12_WaspXBee_cpp_647e1be3</a> from waspxbee.o(.text) referenced from waspxbee.o(.init_array)
 <LI><a href="#[73]">__sti___13_WaspFLASH_cpp_4620997f</a> from waspflash.o(.text) referenced from waspflash.o(.init_array)
 <LI><a href="#[78]">__sti___13_WaspUtils_cpp_5acae417</a> from wasputils.o(.text) referenced from wasputils.o(.init_array)
 <LI><a href="#[72]">__sti___14_WaspEEPROM_cpp_3961584c</a> from waspeeprom.o(.text) referenced from waspeeprom.o(.init_array)
 <LI><a href="#[77]">__sti___14_WaspSensor_cpp_4c707246</a> from waspsensor.o(.text) referenced from waspsensor.o(.init_array)
 <LI><a href="#[79]">__sti___15_WaspXBee802_cpp_3ca8cb33</a> from waspxbee802.o(.text) referenced from waspxbee802.o(.init_array)
 <LI><a href="#[70]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[71]">fputc</a> from dingke_retarget.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[321]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[322]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[323]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[324]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[325]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[80]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[304]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[82]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[83]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[85]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[326]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[87]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[89]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[327]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[328]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[329]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[32a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[32b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[32c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[32d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[32e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[32f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[330]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[331]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[332]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[333]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[334]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[335]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[336]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[337]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[338]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[339]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[33a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[33b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[33c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[33d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[33e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[33f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[340]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[7e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[341]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[342]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; loop &rArr; send_packet() &rArr; WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[343]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[315]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[344]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b4]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[345]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[314]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[346]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, maincpp01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = main &rArr; loop &rArr; send_packet() &rArr; WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9c]"></a>send_packet()</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = send_packet() &rArr; WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[a4]"></a>switchOFFXBee()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = switchOFFXBee() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[a8]"></a>wakeAll()</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wakeAll() &rArr; WaspXBeeCore::ON() &rArr; beginxbee &rArr; beginSerial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3TX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3RX
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::ON()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::init(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[af]"></a>setSeed()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = setSeed() &rArr; WaspXBeeCore::getOwnMacHigh() &rArr; WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacHigh()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacLow()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[b3]"></a>random_delay(unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = random_delay(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_setuppacket()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet()
</UL>

<P><STRONG><a name="[b9]"></a>do_packet()</STRONG> (Thumb, 1774 bytes, Stack size 48 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_packet() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614AmbientTemp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::float2String(float, char*, int)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[bd]"></a>do_setuppacket()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = do_setuppacket() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[be]"></a>handle_var_Ult()</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_var_Ult() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[c0]"></a>sort_array(int*)</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sort_array(int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_median_Ult()
</UL>

<P><STRONG><a name="[bf]"></a>do_median_Ult()</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_median_Ult() &rArr; sort_array(int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_array(int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[c1]"></a>read_Ultrasound()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = read_Ultrasound() &rArr; readMb7076 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMb7076
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[c3]"></a>handle_var_temp(float*, float, char*)</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_var_temp(float*, float, char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::float2String(float, char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[c4]"></a>get_std_dev()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_std_dev() &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[c7]"></a>sort_array_float(float*)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sort_array_float(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_median_temp(float*)
</UL>

<P><STRONG><a name="[c6]"></a>do_median_temp(float*)</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = do_median_temp(float*) &rArr; sort_array_float(float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_array_float(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[c8]"></a>read_Tempsensor(float*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = read_Tempsensor(float*) &rArr; readMlx90614ObjectTemp &rArr; MEM_READ1 &rArr; TX_byte &rArr; send_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614ObjectTemp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614AmbientTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[9a]"></a>setup</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = setup &rArr; send_packet() &rArr; WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zppSystemInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3TX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3RX
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginMb7076
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::setLED(unsigned char, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMac()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::ON()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::init(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPreparePara
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_setuppacket()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSeed()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchOFFXBee()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>loop</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, btest_allsensors_v3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = loop &rArr; send_packet() &rArr; WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::setLED(unsigned char, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMac()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Tempsensor(float*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_median_temp(float*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_std_dev()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_var_temp(float*, float, char*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Ultrasound()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_median_Ult()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_var_Ult()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSeed()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchOFFXBee()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OTG_FS_WKUP_IRQHandler &rArr; SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_UngateClock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>NVIC_Configuration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[db]"></a>SD_LowLevel_DeInit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[e1]"></a>SD_LowLevel_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e2]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[e9]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[ea]"></a>SD_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[f5]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f7]"></a>SD_SelectDeselect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fe]"></a>SD_GetCardInfo</STRONG> (Thumb, 576 bytes, Stack size 28 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f9]"></a>SD_InitializeCards</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fc]"></a>SD_PowerON</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fd]"></a>SD_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::init()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[ff]"></a>SD_SendStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[347]"></a>SD_Detect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>SD_GetState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[101]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[102]"></a>SD_PowerOFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[103]"></a>SD_SendSDStatus</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardStatus
</UL>

<P><STRONG><a name="[104]"></a>SD_GetCardStatus</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[105]"></a>SD_ReadBlock</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[108]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[109]"></a>SD_StopTransfer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[10a]"></a>SD_WaitReadOperation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[10b]"></a>SD_WriteBlock</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[10c]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[10d]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>

<P><STRONG><a name="[348]"></a>SD_GetTransferState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio_sd.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>SD_Erase</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[d3]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sdio_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdio_sd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[349]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sd.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>SD_GetCapacity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdio_sd.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>get_check(char*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendTx64Simple(char*, unsigned char, unsigned long, unsigned long)
</UL>

<P><STRONG><a name="[114]"></a>prepareaexistframe(const char*)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohexpart(char*, unsigned char, unsigned long*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[116]"></a>WaspXBeeCore::getIndexLIFO()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaspXBeeCore::getIndexLIFO() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::readXBee(unsigned char*)
</UL>

<P><STRONG><a name="[117]"></a>WaspXBeeCore::getIndexFIFO()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaspXBeeCore::getIndexFIFO() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::readXBee(unsigned char*)
</UL>

<P><STRONG><a name="[119]"></a>WaspXBeeCore::getFinishIndex()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, waspxbeecore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::readXBee(unsigned char*)
</UL>

<P><STRONG><a name="[118]"></a>WaspXBeeCore::readXBee(unsigned char*)</STRONG> (Thumb, 946 bytes, Stack size 24 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WaspXBeeCore::readXBee(unsigned char*) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getFinishIndex()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getIndexFIFO()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getIndexLIFO()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[11c]"></a>WaspXBeeCore::checkChecksum(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WaspXBeeCore::checkChecksum(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::atCommandResponse(unsigned char*, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::modemStatusResponse(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[11b]"></a>WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkChecksum(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::readXBee(unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
</UL>

<P><STRONG><a name="[11e]"></a>WaspXBeeCore::modemStatusResponse(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WaspXBeeCore::modemStatusResponse(unsigned char*, unsigned short, unsigned short) &rArr; WaspXBeeCore::checkChecksum(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkChecksum(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
</UL>

<P><STRONG><a name="[120]"></a>WaspXBeeCore::treatScan()</STRONG> (Thumb, 532 bytes, Stack size 20 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WaspXBeeCore::treatScan()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::atCommandResponse(unsigned char*, unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[11f]"></a>WaspXBeeCore::atCommandResponse(unsigned char*, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WaspXBeeCore::atCommandResponse(unsigned char*, unsigned char*, unsigned short, unsigned short) &rArr; WaspXBeeCore::treatScan()
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatScan()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkChecksum(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
</UL>

<P><STRONG><a name="[124]"></a>WaspXBeeCore::des_esc(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WaspXBeeCore::des_esc(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
</UL>

<P><STRONG><a name="[121]"></a>WaspXBeeCore::parse_message(unsigned char*)</STRONG> (Thumb, 812 bytes, Stack size 72 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRead
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialAvailable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::des_esc(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::atCommandResponse(unsigned char*, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::modemStatusResponse(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[125]"></a>WaspXBeeCore::gen_send(const char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::getMacMode()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::setMacMode(unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::writeValues()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::encryptionMode(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setLinkKey(const char*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getDurationEnergyChannels()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDurationEnergyChannels(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getScanningChannels()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setScanningChannels(unsigned char, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setScanningTime(unsigned char*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::scanNetwork()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getChannel()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setChannel(unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setSleepMode(unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setPAN(unsigned char*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnNetAddress()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOwnNetAddress(unsigned char, unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacHigh()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacLow()
</UL>

<P><STRONG><a name="[128]"></a>WaspXBeeCore::clearCommand()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, waspxbeecore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[127]"></a>WaspXBeeCore::gen_data(const char*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaspXBeeCore::gen_data(const char*) &rArr; WaspUtils::converter(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::converter(unsigned char, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::getMacMode()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::writeValues()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getDurationEnergyChannels()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getScanningChannels()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::scanNetwork()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getChannel()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnNetAddress()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacHigh()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacLow()
</UL>

<P><STRONG><a name="[b0]"></a>WaspXBeeCore::getOwnMacLow()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::getOwnMacLow() &rArr; WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMac()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSeed()
</UL>

<P><STRONG><a name="[b1]"></a>WaspXBeeCore::getOwnMacHigh()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::getOwnMacHigh() &rArr; WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMac()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSeed()
</UL>

<P><STRONG><a name="[d0]"></a>WaspXBeeCore::getOwnMac()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::getOwnMac() &rArr; WaspXBeeCore::getOwnMacHigh() &rArr; WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacHigh()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMacLow()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[12c]"></a>WaspXBeeCore::gen_checksum(const char*)</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::setMacMode(unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::encryptionMode(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setLinkKey(const char*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDurationEnergyChannels(unsigned char)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setScanningChannels(unsigned char, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setScanningTime(unsigned char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setChannel(unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setSleepMode(unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setPAN(unsigned char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOwnNetAddress(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[12a]"></a>WaspXBeeCore::gen_data(const char*, unsigned char, unsigned char)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::converter(unsigned char, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setScanningChannels(unsigned char, unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOwnNetAddress(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[12b]"></a>WaspXBeeCore::setOwnNetAddress(unsigned char, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendTx64Simple(char*, unsigned char, unsigned long, unsigned long)
</UL>

<P><STRONG><a name="[12d]"></a>WaspXBeeCore::getOwnNetAddress()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::getOwnNetAddress() &rArr; WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[12e]"></a>WaspXBeeCore::gen_data(const char*, unsigned char*)</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::converter(unsigned char, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setScanningTime(unsigned char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setPAN(unsigned char*)
</UL>

<P><STRONG><a name="[12f]"></a>WaspXBeeCore::setPAN(unsigned char*)</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[130]"></a>WaspXBeeCore::gen_data(const char*, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::converter(unsigned char, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::setMacMode(unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::encryptionMode(unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDurationEnergyChannels(unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setChannel(unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setSleepMode(unsigned char)
</UL>

<P><STRONG><a name="[131]"></a>WaspXBeeCore::setSleepMode(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[132]"></a>WaspXBeeCore::setChannel(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
</UL>

<P><STRONG><a name="[133]"></a>WaspXBeeCore::getChannel()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
</UL>

<P><STRONG><a name="[134]"></a>WaspXBeeCore::scanNetwork()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[135]"></a>WaspXBeeCore::setScanningTime(unsigned char*)</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[136]"></a>WaspXBeeCore::setScanningChannels(unsigned char, unsigned char)</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[137]"></a>WaspXBeeCore::getScanningChannels()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[138]"></a>WaspXBeeCore::setDurationEnergyChannels(unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[139]"></a>WaspXBeeCore::getDurationEnergyChannels()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[13a]"></a>WaspXBeeCore::gen_data(const char*, const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setLinkKey(const char*)
</UL>

<P><STRONG><a name="[13b]"></a>WaspXBeeCore::setLinkKey(const char*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, const char*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
</UL>

<P><STRONG><a name="[13c]"></a>WaspXBeeCore::encryptionMode(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[13d]"></a>WaspXBeeCore::writeValues()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
</UL>

<P><STRONG><a name="[13e]"></a>WaspXBeeCore::txStatusResponse()</STRONG> (Thumb, 820 bytes, Stack size 360 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialAvailable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::des_esc(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::modemStatusResponse(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
</UL>

<P><STRONG><a name="[141]"></a>WaspXBeeCore::gen_frame_ap2(strpacketXBee*, unsigned char*, unsigned char&, unsigned char)</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaspXBeeCore::gen_frame_ap2(strpacketXBee*, unsigned char*, unsigned char&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
</UL>

<P><STRONG><a name="[140]"></a>WaspXBeeCore::gen_frame(strpacketXBee*, unsigned char*, unsigned char)</STRONG> (Thumb, 716 bytes, Stack size 28 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WaspXBeeCore::gen_frame(strpacketXBee*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
</UL>

<P><STRONG><a name="[13f]"></a>WaspXBeeCore::sendXBeePriv(strpacketXBee*)</STRONG> (Thumb, 714 bytes, Stack size 48 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_frame(strpacketXBee*, unsigned char*, unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_frame_ap2(strpacketXBee*, unsigned char*, unsigned char&, unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
</UL>

<P><STRONG><a name="[a0]"></a>WaspXBeeCore::sendXBee(strpacketXBee*)</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::sendXBee(strpacketXBee*) &rArr; WaspXBeeCore::sendXBeePriv(strpacketXBee*) &rArr; WaspXBeeCore::txStatusResponse() &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>

<P><STRONG><a name="[143]"></a>WaspXBeeCore::analyserecframe(char*, unsigned char)</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
</UL>

<P><STRONG><a name="[145]"></a>WaspXBeeCore::sendhandleresponse(char*, unsigned char)</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::available()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::printstr(char*, unsigned)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::read()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::analyserecframe(char*, unsigned char)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohexpart(char*, unsigned char, unsigned long*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendTx64Simple(char*, unsigned char, unsigned long, unsigned long)
</UL>

<P><STRONG><a name="[14a]"></a>WaspXBeeCore::findRxframe(char*, unsigned short*)</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::available()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::read()
</UL>

<P><STRONG><a name="[14b]"></a>WaspXBeeCore::findRxframeinRx80Buffer(char*, unsigned short*)</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::Rx80read()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::Rx80available()
</UL>

<P><STRONG><a name="[14e]"></a>WaspXBeeCore::clearFinishArray()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaspXBeeCore::clearFinishArray() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee802::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9f]"></a>WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char)</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::str2hex(char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>

<P><STRONG><a name="[150]"></a>WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::hex2str(unsigned char*, char*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[9e]"></a>WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char) &rArr; WaspXBeeCore::getOwnMac() &rArr; WaspXBeeCore::getOwnMacHigh() &rArr; WaspXBeeCore::gen_send(const char*) &rArr; WaspXBeeCore::parse_message(unsigned char*) &rArr; WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::str2hex(char*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::sizeOf(const char*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnNetAddress()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getOwnMac()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, unsigned char)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>

<P><STRONG><a name="[153]"></a>WaspXBeeCore::delete_firmware()</STRONG> (Thumb, 946 bytes, Stack size 136 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isFile(const char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::create(const char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::del(const char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[15b]"></a>WaspXBeeCore::request_bootlist()</STRONG> (Thumb, 1092 bytes, Stack size 176 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isFile(const char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[15c]"></a>WaspXBeeCore::request_ID()</STRONG> (Thumb, 456 bytes, Stack size 96 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[15d]"></a>WaspXBeeCore::upload_firmware()</STRONG> (Thumb, 1192 bytes, Stack size 120 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::writeEEPROM(int, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isFile(const char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[15f]"></a>WaspXBeeCore::setMulticastConf()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::writeEEPROM(int, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::writeValues()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setLinkKey(const char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setChannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkOtapTimeout()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
</UL>

<P><STRONG><a name="[160]"></a>WaspXBeeCore::new_firmware_end()</STRONG> (Thumb, 1402 bytes, Stack size 96 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::array2long(char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isFile(const char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::create(const char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[ab]"></a>WaspXBeeCore::ON()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, waspxbeecore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WaspXBeeCore::ON() &rArr; beginxbee &rArr; beginSerial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkOtapTimeout()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[164]"></a>WaspXBeeCore::OFF()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::setMode(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkOtapTimeout()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
</UL>

<P><STRONG><a name="[167]"></a>WaspXBeeCore::new_firmware_packets()</STRONG> (Thumb, 400 bytes, Stack size 136 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::OFF()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::ON()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[168]"></a>WaspXBeeCore::new_firmware_received()</STRONG> (Thumb, 1080 bytes, Stack size 72 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::writeEEPROM(int, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isFile(const char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::create(const char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::del(const char*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::writeValues()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setLinkKey(const char*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getChannel()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setChannel(unsigned char)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
</UL>

<P><STRONG><a name="[169]"></a>WaspXBeeCore::treatData()</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearFinishArray()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[16a]"></a>WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, int, unsigned char, unsigned char)</STRONG> (Thumb, 514 bytes, Stack size 72 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::str2hex(char*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::long2array(long, char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, int, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16c]"></a>WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, int, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::hex2str(unsigned char*, char*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, int, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>WaspXBeeCore::setOriginParams(strpacketXBee*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[16e]"></a>WaspXBeeCore::checkNewProgram()</STRONG> (Thumb, 758 bytes, Stack size 136 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::writeEEPROM(int, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[16f]"></a>WaspXBeeCore::checkOtapTimeout()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::OFF()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::ON()
</UL>

<P><STRONG><a name="[170]"></a>WaspXBeeCore::sendTx64Simple(char*, unsigned char, unsigned long, unsigned long)</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOwnNetAddress(unsigned char, unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check(char*, unsigned char)
</UL>

<P><STRONG><a name="[172]"></a>WaspXBeeCore::txZBStatusResponse()</STRONG> (Thumb, 624 bytes, Stack size 360 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialAvailable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::des_esc(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::modemStatusResponse(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[34b]"></a>WaspXBeeCore::getChecksum(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, waspxbeecore.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>WaspXBeeCore::freeIndex()</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[174]"></a>WaspXBeeCore::freeAll()</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[175]"></a>WaspXBeeCore::freeIndexMatrix(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[34c]"></a>WaspEEPROM::WaspEEPROM()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>WaspEEPROM::WaspEEPROM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>WaspEEPROM::ON()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOn
</UL>

<P><STRONG><a name="[178]"></a>WaspEEPROM::OFF()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOff
</UL>

<P><STRONG><a name="[17a]"></a>WaspEEPROM::begin()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[17c]"></a>WaspEEPROM::start()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[17e]"></a>WaspEEPROM::WriteProtection(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeprotection
</UL>

<P><STRONG><a name="[180]"></a>WaspEEPROM::SoftwareReset()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softwarereset
</UL>

<P><STRONG><a name="[182]"></a>WaspEEPROM::setSlaveAddress(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>

<P><STRONG><a name="[184]"></a>WaspEEPROM::writeEEPROM(int, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[186]"></a>WaspEEPROM::readEEPROM(int)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>

<P><STRONG><a name="[188]"></a>WaspEEPROM::writeEEPROM(unsigned char, int, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::writeEEPROM(int, unsigned char)
</UL>

<P><STRONG><a name="[18a]"></a>WaspEEPROM::readEEPROM(unsigned char, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::readEEPROM(int)
</UL>

<P><STRONG><a name="[18c]"></a>WaspEEPROM::writeEEPROMStr(unsigned char, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEeprom
</UL>

<P><STRONG><a name="[18d]"></a>WaspEEPROM::readEEPROMStr(unsigned char, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, waspeeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEeprom
</UL>

<P><STRONG><a name="[18e]"></a>WaspFLASH::checkbusy()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeDisable()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
</UL>

<P><STRONG><a name="[190]"></a>WaspFLASH::writeEnable()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister3(unsigned char)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister2(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister1(unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagebyte4add(long, unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>WaspFLASH::flashpagebyte4add(long, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[192]"></a>WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char*, unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[193]"></a>WaspFLASH::flashsectorerase4add(long)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::sectorerase(unsigned)
</UL>

<P><STRONG><a name="[34e]"></a>WaspFLASH::WaspFLASH()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waspflash.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>WaspFLASH::WaspFLASH__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, waspflash.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>WaspFLASH::setADP()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::SPI_Flash_Init()
</UL>

<P><STRONG><a name="[195]"></a>WaspFLASH::checkaddbit()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::SPI_Flash_Init()
</UL>

<P><STRONG><a name="[196]"></a>WaspFLASH::SPI_Flash_Init()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SPI_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPin_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkaddbit()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::setADP()
</UL>

<P><STRONG><a name="[19a]"></a>WaspFLASH::writeDisable()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[19b]"></a>WaspFLASH::flashreaddata4add(long)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readFlashsector(unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readFlash4byte(unsigned)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readFlash2byte(unsigned)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readFlash1byte(unsigned)
</UL>

<P><STRONG><a name="[19c]"></a>WaspFLASH::readFlash1byte(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
</UL>

<P><STRONG><a name="[19d]"></a>WaspFLASH::readFlash2byte(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
</UL>

<P><STRONG><a name="[19e]"></a>WaspFLASH::readFlash4byte(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
</UL>

<P><STRONG><a name="[19f]"></a>WaspFLASH::sectorerase(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashsectorerase4add(long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char*, unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1a0]"></a>WaspFLASH::readFlashsector(unsigned)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char*, unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1a1]"></a>WaspFLASH::writeFlash(unsigned, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readFlashsector(unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::sectorerase(unsigned)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1a2]"></a>WaspFLASH::writeFlash(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readFlashsector(unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::sectorerase(unsigned)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[1a3]"></a>WaspFLASH::writeFlash(unsigned, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1a4]"></a>WaspFLASH::writeFlash(unsigned, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeFlash(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1a5]"></a>WaspFLASH::readStatusRegister1()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1a6]"></a>WaspFLASH::readStatusRegister2()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1a7]"></a>WaspFLASH::readStatusRegister3()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1a8]"></a>WaspFLASH::writestatusregister1(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1a9]"></a>WaspFLASH::writestatusregister2(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1aa]"></a>WaspFLASH::writestatusregister3(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1ab]"></a>WaspFLASH::reset()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RWByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1ac]"></a>WaspFLASH::writeprotection(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, waspflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[350]"></a>WaspPWR::WaspPWR()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>WaspPWR::WaspPWR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>WaspPWR::initPower(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwr
</UL>

<P><STRONG><a name="[1af]"></a>WaspPWR::initAllPower()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAllPwr
</UL>

<P><STRONG><a name="[1b1]"></a>WaspPWR::setSensorPower(unsigned, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
</UL>

<P><STRONG><a name="[1b3]"></a>WaspPWR::setWatchdog(unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>

<P><STRONG><a name="[1b8]"></a>WaspPWR::switchesOFF(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
</UL>

<P><STRONG><a name="[1b9]"></a>WaspPWR::switchesON(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
</UL>

<P><STRONG><a name="[1ba]"></a>WaspPWR::initBattery()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[1bb]"></a>WaspPWR::activeDS2745()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[1bd]"></a>WaspPWR::sleepDS2745()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1be]"></a>WaspPWR::getBatteryVolts()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
</UL>

<P><STRONG><a name="[1c0]"></a>WaspPWR::getBatterytemperature()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
</UL>

<P><STRONG><a name="[1c1]"></a>WaspPWR::getBatteryCurrent()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
</UL>

<P><STRONG><a name="[1c2]"></a>WaspPWR::addBatteryCurrent()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wasppwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
</UL>

<P><STRONG><a name="[352]"></a>WaspPWR::closeI2C()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>WaspPWR::reboot()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasppwr.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>WaspRTC::WaspRTC()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>WaspRTC::WaspRTC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>WaspRTC::resetVars()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>WaspRTC::writeRTC()</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytetobcd
</UL>

<P><STRONG><a name="[1c6]"></a>WaspRTC::readRTC()</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdtobyte
</UL>

<P><STRONG><a name="[1c9]"></a>WaspRTC::ON()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOn
</UL>

<P><STRONG><a name="[1ca]"></a>WaspRTC::OFF()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOff
</UL>

<P><STRONG><a name="[1cb]"></a>WaspRTC::begin()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[357]"></a>WaspRTC::close()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>WaspRTC::setTime(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTimeStr
</UL>

<P><STRONG><a name="[1ce]"></a>WaspRTC::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTime
</UL>

<P><STRONG><a name="[1d0]"></a>WaspRTC::getTime()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExternalTime
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[1d2]"></a>WaspRTC::getTemperature()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
</UL>

<P><STRONG><a name="[1d3]"></a>WaspRTC::setAlarm1andOn(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalAlarm1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onExternalAlarm1
</UL>

<P><STRONG><a name="[1d6]"></a>WaspRTC::clearAlarm1()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearExternalAlarm1
</UL>

<P><STRONG><a name="[1d8]"></a>WaspRTC::offAlarm1()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offExternalAlarm1
</UL>

<P><STRONG><a name="[1da]"></a>WaspRTC::setAlarm1asAwake(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wasprtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalAlarm1AsAwake
</UL>

<P><STRONG><a name="[1dc]"></a>SD_poweron()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::ON()
</UL>

<P><STRONG><a name="[1dd]"></a>SD_poweroff()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::OFF()
</UL>

<P><STRONG><a name="[1de]"></a>getUfatsize(const char*, unsigned long long*)</STRONG> (Thumb, 56 bytes, Stack size 576 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getDiskSize()
</UL>

<P><STRONG><a name="[1e0]"></a>getUfatfreesize(const char*, unsigned long long*)</STRONG> (Thumb, 50 bytes, Stack size 576 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getDiskFree()
</UL>

<P><STRONG><a name="[1e3]"></a>createfile(const char*)</STRONG> (Thumb, 36 bytes, Stack size 552 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::create(const char*)
</UL>

<P><STRONG><a name="[1e7]"></a>createdir(const char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::mkdir(const char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::create(const char*)
</UL>

<P><STRONG><a name="[358]"></a>WaspSD::WaspSD()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>WaspSD::WaspSD__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>WaspSD::cleanFlags()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>WaspSD::isSD()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>WaspSD::ON()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweron()
</UL>

<P><STRONG><a name="[1ea]"></a>WaspSD::OFF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweroff()
</UL>

<P><STRONG><a name="[1eb]"></a>WaspSD::init()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[35c]"></a>WaspSD::close()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>WaspSD::begin()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>WaspSD::setMode(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>WaspSD::print_disk_info()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[1ee]"></a>WaspSD::getDiskSize()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUfatsize(const char*, unsigned long long*)
</UL>

<P><STRONG><a name="[1ef]"></a>WaspSD::getDiskFree()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUfatfreesize(const char*, unsigned long long*)
</UL>

<P><STRONG><a name="[35f]"></a>WaspSD::cd(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>WaspSD::numFiles(const char*)</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
</UL>

<P><STRONG><a name="[360]"></a>WaspSD::find_file_in_dir(const char*, fat_dir_entry_struct*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>WaspSD::isDir(const char*)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileInf(const char*, FILINFO*)
</UL>

<P><STRONG><a name="[155]"></a>WaspSD::isFile(const char*)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileInf(const char*, FILINFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[15a]"></a>WaspSD::del(const char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::delFile(const char*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::delDir(const char*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[1f6]"></a>WaspSD::deldirall(const char*)</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathcuttail(char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
</UL>

<P><STRONG><a name="[1f9]"></a>WaspSD::delDir(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::del(const char*)
</UL>

<P><STRONG><a name="[1fa]"></a>WaspSD::delFile(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::del(const char*)
</UL>

<P><STRONG><a name="[1fb]"></a>WaspSD::openFile(FIL*, const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, unsigned char*, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numln(const char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::catln(const char*, unsigned, unsigned short)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[157]"></a>WaspSD::getFileSize(const char*)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileInf(const char*, FILINFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numln(const char*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[1fc]"></a>WaspSD::getAttributes(const char*)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileInf(const char*, FILINFO*)
</UL>

<P><STRONG><a name="[158]"></a>WaspSD::readSD(const char*, void*, unsigned, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 576 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::catBin(const char*, int, unsigned short)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::cat(const char*, int, unsigned short)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[1fe]"></a>WaspSD::cat(const char*, int, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1ff]"></a>WaspSD::catBin(const char*, int, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[200]"></a>WaspSD::catln(const char*, unsigned, unsigned short)</STRONG> (Thumb, 188 bytes, Stack size 584 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readln(FIL*, unsigned char*, unsigned*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>

<P><STRONG><a name="[201]"></a>WaspSD::indexOf(const char*, const char*, unsigned)</STRONG> (Thumb, 168 bytes, Stack size 592 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[202]"></a>WaspSD::numln(const char*)</STRONG> (Thumb, 134 bytes, Stack size 584 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
</UL>

<P><STRONG><a name="[156]"></a>WaspSD::create(const char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createdir(const char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createfile(const char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[203]"></a>WaspSD::mkdir(const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createdir(const char*)
</UL>

<P><STRONG><a name="[204]"></a>WaspSD::writeSD(const char*, const char*, int)</STRONG> (Thumb, 106 bytes, Stack size 576 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[206]"></a>WaspSD::writeSD(const char*, unsigned char*, int)</STRONG> (Thumb, 102 bytes, Stack size 576 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[159]"></a>WaspSD::writeSD(const char*, const char*, int, short)</STRONG> (Thumb, 90 bytes, Stack size 576 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[361]"></a>WaspSensor::WaspSensor()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsensor.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>WaspSensor::WaspSensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, waspsensor.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>WaspSensor::init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspsensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[209]"></a>WaspSensor::readSensor(unsigned char, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, waspsensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>

<P><STRONG><a name="[20a]"></a>WaspSensor::readSensor(unsigned char, int)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, waspsensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>

<P><STRONG><a name="[20b]"></a>WaspSensor::writeSensor(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, waspsensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[20c]"></a>WaspSensor::writeSensor(unsigned char, int, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, waspsensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[363]"></a>WaspUtils::WaspUtils()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasputils.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>WaspUtils::WaspUtils__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wasputils.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>WaspUtils::initLEDs()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[cc]"></a>WaspUtils::setLED(unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wasputils.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::blinkLEDs(unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[20e]"></a>WaspUtils::getLED(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>

<P><STRONG><a name="[210]"></a>WaspUtils::blinkLEDs(unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::setLED(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[365]"></a>WaspUtils::setMuxAux1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasputils.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>WaspUtils::readEEPROM(int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROM(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
</UL>

<P><STRONG><a name="[15e]"></a>WaspUtils::writeEEPROM(int, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::writeEEPROM(unsigned char, int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setMulticastConf()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
</UL>

<P><STRONG><a name="[162]"></a>WaspUtils::array2long(char*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
</UL>

<P><STRONG><a name="[16b]"></a>WaspUtils::long2array(long, char*)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, int, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[14f]"></a>WaspUtils::str2hex(char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wasputils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaspUtils::str2hex(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, int, unsigned char, unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[366]"></a>WaspUtils::str2hex(unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wasputils.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>WaspUtils::hex2str(unsigned char*, char*, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::hex2str(unsigned char*, char*)
</UL>

<P><STRONG><a name="[151]"></a>WaspUtils::hex2str(unsigned char*, char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wasputils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::hex2str(unsigned char*, char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, int, unsigned char, unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, unsigned char*, const char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[152]"></a>WaspUtils::sizeOf(const char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wasputils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[367]"></a>WaspUtils::strCmp(const char*, const char*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wasputils.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>WaspUtils::converter(unsigned char, unsigned char)</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, wasputils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaspUtils::converter(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
</UL>

<P><STRONG><a name="[bb]"></a>WaspUtils::float2String(float, char*, int)</STRONG> (Thumb, 166 bytes, Stack size 60 bytes, wasputils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WaspUtils::float2String(float, char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_var_temp(float*, float, char*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet()
</UL>

<P><STRONG><a name="[aa]"></a>WaspXBee802::init(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, waspxbee802.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WaspXBee802::init(unsigned char, unsigned char, unsigned char) &rArr; WaspXBeeCore::clearFinishArray() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearFinishArray()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[212]"></a>WaspXBee802::setMacMode(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, waspxbee802.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*, unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_checksum(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[213]"></a>WaspXBee802::getMacMode()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, waspxbee802.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_data(const char*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[214]"></a>WaspXBee::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printIntegerInBase
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long, int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long)
</UL>

<P><STRONG><a name="[368]"></a>WaspXBee::WaspXBee()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>WaspXBee::WaspXBee__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>WaspXBee::begin()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
</UL>

<P><STRONG><a name="[165]"></a>WaspXBee::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSerial
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::OFF()
</UL>

<P><STRONG><a name="[166]"></a>WaspXBee::setMode(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSerial
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::OFF()
</UL>

<P><STRONG><a name="[148]"></a>WaspXBee::available()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::findRxframe(char*, unsigned short*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
</UL>

<P><STRONG><a name="[149]"></a>WaspXBee::read()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRead
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::findRxframe(char*, unsigned short*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
</UL>

<P><STRONG><a name="[14c]"></a>WaspXBee::Rx80available()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRx80Available
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::findRxframeinRx80Buffer(char*, unsigned short*)
</UL>

<P><STRONG><a name="[14d]"></a>WaspXBee::Rx80read()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRx80Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::findRxframeinRx80Buffer(char*, unsigned short*)
</UL>

<P><STRONG><a name="[21a]"></a>WaspXBee::readstr(unsigned char*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialReadstr
</UL>

<P><STRONG><a name="[21c]"></a>WaspXBee::flush()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialFlush
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[21d]"></a>WaspXBee::print(char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
</UL>

<P><STRONG><a name="[21e]"></a>WaspXBee::print(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>

<P><STRONG><a name="[220]"></a>WaspXBee::print(long)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::printNumber(unsigned long, unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long, int)
</UL>

<P><STRONG><a name="[221]"></a>WaspXBee::print(long, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::printNumber(unsigned long, unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println(long, int)
</UL>

<P><STRONG><a name="[222]"></a>WaspXBee::println()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println(long, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println(const char*)
</UL>

<P><STRONG><a name="[223]"></a>WaspXBee::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println()
</UL>

<P><STRONG><a name="[224]"></a>WaspXBee::println(long, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long, int)
</UL>

<P><STRONG><a name="[146]"></a>WaspXBee::printstr(char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, waspxbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
</UL>

<P><STRONG><a name="[225]"></a>Timer3_Init</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, dingke_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer3_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
</UL>

<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dingke_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dingke_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkOtapTimeout()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::readXBee(unsigned char*)
</UL>

<P><STRONG><a name="[142]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dingke_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkOtapTimeout()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBee(strpacketXBee*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::ON()
</UL>

<P><STRONG><a name="[22d]"></a>Timer2_Init</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, dingke_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dingke_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>beginSerial</STRONG> (Thumb, 580 bytes, Stack size 64 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = beginSerial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginMb7076
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[231]"></a>chooseuartinterrupt</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chooseuartinterrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginMb7076
</UL>

<P><STRONG><a name="[ad]"></a>monitor_onuart3TX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = monitor_onuart3TX &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[233]"></a>monitor_onuart3RX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[234]"></a>monitor_offuart3TX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[ac]"></a>monitor_offuart3RX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = monitor_offuart3RX &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[235]"></a>monitor_on</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[236]"></a>Xbee_poweron</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Xbee_poweron &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginxbee
</UL>

<P><STRONG><a name="[237]"></a>Xbee_poweroff</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[238]"></a>Mux_poweron</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muluart6init
</UL>

<P><STRONG><a name="[239]"></a>Mux_poweroff</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[23a]"></a>muluart6init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweron
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[23b]"></a>muluart6choose</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[36a]"></a>closexbeepwr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dingke_uart.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>beginxbee</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = beginxbee &rArr; beginSerial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_poweron
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseuartinterrupt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::begin()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::setMode(unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::ON()
</UL>

<P><STRONG><a name="[217]"></a>closeSerial</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::setMode(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::close()
</UL>

<P><STRONG><a name="[23f]"></a>serialWrite</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dingke_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printByte
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[122]"></a>serialAvailable</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, dingke_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::available()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
</UL>

<P><STRONG><a name="[123]"></a>serialRead</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serialRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialReadstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::read()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[23d]"></a>serialPreRx80Available</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle1msprerx80
</UL>

<P><STRONG><a name="[23e]"></a>serialPreRx80Read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle1msprerx80
</UL>

<P><STRONG><a name="[23c]"></a>handle1msprerx80</STRONG> (Thumb, 220 bytes, Stack size 36 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPreRx80Read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPreRx80Available
</UL>

<P><STRONG><a name="[218]"></a>serialRx80Available</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::Rx80available()
</UL>

<P><STRONG><a name="[219]"></a>serialRx80Read</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::Rx80read()
</UL>

<P><STRONG><a name="[21b]"></a>serialReadstr</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::readstr(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[11d]"></a>serialFlush</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dingke_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::flush()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkOtapTimeout()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[126]"></a>printByte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dingke_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long, int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(long)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(char)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::printstr(char*, unsigned)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendXBeePriv(strpacketXBee*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::gen_send(const char*)
</UL>

<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>printString</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printIntegerInBase
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::println(const char*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::print(const char*)
</UL>

<P><STRONG><a name="[244]"></a>uartsendstr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWritestr
</UL>

<P><STRONG><a name="[243]"></a>serialWritestr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartsendstr
</UL>

<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART6_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>printIntegerInBase</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, dingke_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[cd]"></a>beginMb7076</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = beginMb7076 &rArr; beginSerial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseuartinterrupt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[c2]"></a>readMb7076</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, dingke_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = readMb7076 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Ultrasound()
</UL>

<P><STRONG><a name="[245]"></a>SMBusSDA_OUT</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bit
</UL>

<P><STRONG><a name="[246]"></a>SMBusSDA_IN</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMBusSDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_bit
</UL>

<P><STRONG><a name="[247]"></a>SMBus_poweron</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMBus_poweron &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
</UL>

<P><STRONG><a name="[ce]"></a>SMBus_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SMBus_Init &rArr; SMBus_poweron &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_poweron
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[cf]"></a>SMBus_Apply</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SMBus_Apply &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614Subadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614ObjectTemp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614AmbientTemp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[248]"></a>send_bit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = send_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_OUT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_byte
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_byte
</UL>

<P><STRONG><a name="[24a]"></a>receive_bit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = receive_bit &rArr; SMBusSDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_IN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_byte
</UL>

<P><STRONG><a name="[24c]"></a>RX_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RX_byte &rArr; receive_bit &rArr; SMBusSDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_bit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
</UL>

<P><STRONG><a name="[24d]"></a>TX_byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TX_byte &rArr; send_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKaddress
</UL>

<P><STRONG><a name="[24e]"></a>slave_ack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = slave_ack &rArr; SMBusSDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_IN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKaddress
</UL>

<P><STRONG><a name="[253]"></a>PEC_cal</STRONG> (Thumb, 206 bytes, Stack size 44 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PEC_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
</UL>

<P><STRONG><a name="[24f]"></a>start_bit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = start_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_OUT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKaddress
</UL>

<P><STRONG><a name="[250]"></a>stop_bit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stop_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_OUT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKaddress
</UL>

<P><STRONG><a name="[251]"></a>ACKaddress</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dingke_smbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMlx90614Subadd
</UL>

<P><STRONG><a name="[252]"></a>MEM_READ1</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MEM_READ1 &rArr; TX_byte &rArr; send_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEC_cal
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_byte
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614Subadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614ObjectTemp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614AmbientTemp
</UL>

<P><STRONG><a name="[254]"></a>MEM_WRITE1</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dingke_smbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEC_cal
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_byte
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMlx90614Subadd
</UL>

<P><STRONG><a name="[255]"></a>readMlx90614Subadd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dingke_smbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
</UL>

<P><STRONG><a name="[256]"></a>changeMlx90614Subadd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dingke_smbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKaddress
</UL>

<P><STRONG><a name="[bc]"></a>readMlx90614AmbientTemp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = readMlx90614AmbientTemp &rArr; MEM_READ1 &rArr; TX_byte &rArr; send_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trantocentigradefloat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Tempsensor(float*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet()
</UL>

<P><STRONG><a name="[c9]"></a>readMlx90614ObjectTemp</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = readMlx90614ObjectTemp &rArr; MEM_READ1 &rArr; TX_byte &rArr; send_bit &rArr; SMBusSDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_READ1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trantocentigradefloat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Tempsensor(float*)
</UL>

<P><STRONG><a name="[177]"></a>i2cOn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::ON()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::ON()
</UL>

<P><STRONG><a name="[179]"></a>i2cOff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::OFF()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::OFF()
</UL>

<P><STRONG><a name="[17b]"></a>i2cInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::init()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::begin()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::initBattery()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::begin()
</UL>

<P><STRONG><a name="[17d]"></a>i2cStart</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, int, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEeprom
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softwarereset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEeprom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROM(int)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::start()
</UL>

<P><STRONG><a name="[185]"></a>i2cStop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, int, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEeprom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROM(int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::writeEEPROM(int, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
</UL>

<P><STRONG><a name="[25a]"></a>i2cWait_Ack</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>

<P><STRONG><a name="[25b]"></a>i2cAck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
</UL>

<P><STRONG><a name="[25c]"></a>i2cNAck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
</UL>

<P><STRONG><a name="[25d]"></a>i2cSend_Byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>

<P><STRONG><a name="[183]"></a>IICSendByteAck</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend_Byte
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, int, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEeprom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROM(int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::writeEEPROM(int, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::setSlaveAddress(unsigned char)
</UL>

<P><STRONG><a name="[187]"></a>i2cRead_Byte</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cNAck
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::readSensor(unsigned char, unsigned char)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDS2745
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEeprom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROM(int)
</UL>

<P><STRONG><a name="[17f]"></a>writeprotection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::WriteProtection(int)
</UL>

<P><STRONG><a name="[181]"></a>softwarereset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::SoftwareReset()
</UL>

<P><STRONG><a name="[1c7]"></a>readExternalRTC</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalAlarm1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onExternalAlarm1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offExternalAlarm1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExternalTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearExternalAlarm1
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::getTemperature()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::readRTC()
</UL>

<P><STRONG><a name="[1c5]"></a>writeExternalRTC</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTimeStr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTime
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalAlarm1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onExternalAlarm1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offExternalAlarm1
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearExternalAlarm1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::writeRTC()
</UL>

<P><STRONG><a name="[1c8]"></a>bcdtobyte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExternalTime
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::readRTC()
</UL>

<P><STRONG><a name="[1c4]"></a>bytetobcd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTimeStr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTime
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalAlarm1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::writeRTC()
</UL>

<P><STRONG><a name="[36b]"></a>getExternalTimestamp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dingke_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>getExternalTime</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdtobyte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::getTime()
</UL>

<P><STRONG><a name="[1cf]"></a>setExternalTime</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytetobcd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cd]"></a>setExternalTimeStr</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytetobcd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::setTime(const char*)
</UL>

<P><STRONG><a name="[1d4]"></a>setExternalAlarm1</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytetobcd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::setAlarm1andOn(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d7]"></a>clearExternalAlarm1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::clearAlarm1()
</UL>

<P><STRONG><a name="[1d9]"></a>offExternalAlarm1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::offAlarm1()
</UL>

<P><STRONG><a name="[1d5]"></a>onExternalAlarm1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readExternalRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalAlarm1AsAwake
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::setAlarm1andOn(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1db]"></a>setExternalAlarm1AsAwake</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onExternalAlarm1
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::setAlarm1asAwake(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18b]"></a>readEeprom</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROMStr(unsigned char, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::readEEPROM(unsigned char, int)
</UL>

<P><STRONG><a name="[189]"></a>writeEeprom</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendByteAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::writeEEPROMStr(unsigned char, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::writeEEPROM(unsigned char, int, unsigned char)
</UL>

<P><STRONG><a name="[1bf]"></a>readDS2745</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend_Byte
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::addBatteryCurrent()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::getBatteryCurrent()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::getBatterytemperature()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::getBatteryVolts()
</UL>

<P><STRONG><a name="[1bc]"></a>writeDS2745</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dingke_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend_Byte
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::sleepDS2745()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::activeDS2745()
</UL>

<P><STRONG><a name="[25e]"></a>SPI_poweron</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dingke_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[197]"></a>SPI2_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dingke_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_poweron
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::SPI_Flash_Init()
</UL>

<P><STRONG><a name="[199]"></a>FLASH_SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dingke_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::SPI_Flash_Init()
</UL>

<P><STRONG><a name="[198]"></a>CSPin_init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, dingke_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::SPI_Flash_Init()
</UL>

<P><STRONG><a name="[18f]"></a>SPI2_RWByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dingke_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::reset()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister3(unsigned char)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister2(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister1(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister3()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister2()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister1()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeDisable()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkaddbit()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::setADP()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashsectorerase4add(long)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagebyte4add(long, unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
</UL>

<P><STRONG><a name="[1ae]"></a>initPwr</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, dingke_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAllPwr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::initPower(unsigned)
</UL>

<P><STRONG><a name="[1b0]"></a>initAllPwr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dingke_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwr
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::initAllPower()
</UL>

<P><STRONG><a name="[1b2]"></a>setPwr</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, dingke_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::switchesON(unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::switchesOFF(unsigned)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::setSensorPower(unsigned, unsigned char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onAllPwr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offAllPwr
</UL>

<P><STRONG><a name="[262]"></a>offAllPwr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dingke_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
</UL>

<P><STRONG><a name="[263]"></a>onAllPwr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dingke_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
</UL>

<P><STRONG><a name="[264]"></a>GPIO_def</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dingke_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[265]"></a>exti_def</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dingke_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[268]"></a>NIVC_def</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dingke_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[269]"></a>setPowerEnoughAsAwake</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, dingke_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dingke_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dingke_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dingke_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dingke_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::blinkLEDs(unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, int, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSensor::writeSensor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeExternalRTC
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDS2745
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::sleepDS2745()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEeprom
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspEEPROM::writeEEPROM(int, unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_WRITE1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMb7076
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[249]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dingke_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend_Byte
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cNAck
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKaddress
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_bit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bit
</UL>

<P><STRONG><a name="[71]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dingke_retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>fgetc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dingke_retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialRead
</UL>

<P><STRONG><a name="[36c]"></a>fclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dingke_retarget.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dingke_retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[36d]"></a>fseek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dingke_retarget.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>fflush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dingke_retarget.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dingke_retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dingke_retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[26d]"></a>SysChsngeDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dingke_sysclkchange.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysChsngeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysChsngeDelay
</UL>

<P><STRONG><a name="[ca]"></a>SysPreparePara</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, dingke_sysclkchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysPreparePara
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[cb]"></a>zppSystemInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dingke_sysclkchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = zppSystemInit &rArr; zppSetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zppSetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[26f]"></a>WWDG_NVIC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dingke_wdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[d1]"></a>IWDG_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dingke_wdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[d2]"></a>IWDG_Feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dingke_wdg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[271]"></a>WWDG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dingke_wdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetWindowValue
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetPrescaler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_EnableIT
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_NVIC_Init
</UL>

<P><STRONG><a name="[277]"></a>WWDG_Set_Counter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dingke_wdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Enable
</UL>

<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dingke_wdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetCounter
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>WWDG_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_wwdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[272]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[273]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_wwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[276]"></a>WWDG_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[278]"></a>WWDG_SetCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[274]"></a>WWDG_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Set_Counter
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[36f]"></a>WWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>WWDG_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[370]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[27b]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[372]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[382]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::initLEDs()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweroff()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweron()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPin_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerEnoughAsAwake
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_def
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_poweron
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_poweron
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_IN
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_OUT
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muluart6init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweroff
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweron
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_poweroff
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_poweron
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_on
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3TX
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3RX
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3TX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3RX
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginMb7076
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchOFFXBee()
</UL>

<P><STRONG><a name="[2d7]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[386]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>

<P><STRONG><a name="[df]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerEnoughAsAwake
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_def
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>

<P><STRONG><a name="[27e]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[387]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[280]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[389]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>GPIO_DeInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::initLEDs()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweroff()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweron()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPin_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerEnoughAsAwake
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_def
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_poweron
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_poweron
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_IN
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBusSDA_OUT
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muluart6init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweroff
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweron
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_poweroff
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_poweron
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_on
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3TX
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3RX
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3TX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3RX
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginMb7076
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchOFFXBee()
</UL>

<P><STRONG><a name="[392]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_bit
</UL>

<P><STRONG><a name="[394]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::getLED(unsigned char)
</UL>

<P><STRONG><a name="[395]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::initLEDs()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweron()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::activeDS2745()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPin_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeprotection(unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::reset()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister3(unsigned char)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister2(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister1(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister3()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister2()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister1()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeDisable()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkaddbit()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::setADP()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashsectorerase4add(long)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagebyte4add(long, unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeprotection
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOn
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_poweron
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend_Byte
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cNAck
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_bit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_poweron
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muluart6choose
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweron
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_on
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3RX
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_onuart3TX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginMb7076
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::setLED(unsigned char, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeAll()
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::initLEDs()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_poweroff()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPwr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::sleepDS2745()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeprotection(unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::reset()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister3(unsigned char)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister2(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writestatusregister1(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister3()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister2()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::readStatusRegister1()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashreaddata4add(long)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeDisable()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkaddbit()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::setADP()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashsectorerase4add(long)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagestr4add(long, unsigned char*, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::flashpagebyte4add(long, unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::writeEnable()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspFLASH::checkbusy()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeprotection
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOff
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend_Byte
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cNAck
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWait_Ack
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_bit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_bit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_ack
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_bit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muluart6choose
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_poweroff
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_poweroff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3TX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_offuart3RX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspUtils::setLED(unsigned char, unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Apply
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchOFFXBee()
</UL>

<P><STRONG><a name="[396]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>

<P><STRONG><a name="[27f]"></a>USART_DeInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[22f]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>

<P><STRONG><a name="[398]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSerial
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>

<P><STRONG><a name="[39b]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[241]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[39e]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseuartinterrupt
</UL>

<P><STRONG><a name="[3ab]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[3ad]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NIVC_def
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[da]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_NVIC_Init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerEnoughAsAwake
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NIVC_def
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSerial
</UL>

<P><STRONG><a name="[3ae]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[228]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[3b1]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[3bd]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>TIM_SelectOCxM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[288]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[287]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[285]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[282]"></a>TIM_ICInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3e0]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3e1]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[3ea]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[22c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[3ed]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[28a]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[28c]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[28e]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[28d]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[28f]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[3f1]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SPI_Init
</UL>

<P><STRONG><a name="[260]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SPI_Init
</UL>

<P><STRONG><a name="[3f7]"></a>I2S_Init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SPI_Init
</UL>

<P><STRONG><a name="[3fa]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>SPI_TIModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::setWatchdog(unsigned char, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1b6]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::setWatchdog(unsigned char, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[270]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1b5]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::setWatchdog(unsigned char, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[1b7]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspPWR::setWatchdog(unsigned char, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[40d]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>SDIO_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[f6]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[40e]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>SDIO_ClockCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[dd]"></a>SDIO_SetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[fa]"></a>SDIO_GetPowerState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[f0]"></a>SDIO_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[40f]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[ee]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[f1]"></a>SDIO_DataConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[410]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[412]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>SDIO_DMACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[106]"></a>SDIO_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[f2]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ec]"></a>SDIO_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[110]"></a>SDIO_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[111]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[e5]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[e6]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[41c]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[41d]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[41e]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>DMA_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[e7]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[427]"></a>DMA_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerEnoughAsAwake
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_def
</UL>

<P><STRONG><a name="[42a]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[290]"></a>SYSCFG_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[42f]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerEnoughAsAwake
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_def
</UL>

<P><STRONG><a name="[430]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>USBD_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>USBD_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2a7]"></a>USBD_SetCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[2a6]"></a>USBD_ClrCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[29f]"></a>USBD_CtlSendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[29c]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[2a1]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[29a]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[29b]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[29d]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[434]"></a>USBD_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_ioreq.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>USBD_CtlError</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[297]"></a>USBD_StdDevReq</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[298]"></a>USBD_StdItfReq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[299]"></a>USBD_StdEPReq</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[295]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usbd_req.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[435]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_req.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[2b8]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[2b7]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[2ca]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2bd]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2cc]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2cb]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2b6]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>

<P><STRONG><a name="[2bf]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>

<P><STRONG><a name="[2c0]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[436]"></a>USB_OTG_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[437]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[438]"></a>USB_OTG_ReadOtgItr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[2c3]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[2c1]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2b5]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b4]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2cd]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[2cf]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[2c4]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 298 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[2d0]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[2c8]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetEPStatus
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[2c9]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetEPStatus
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[2b9]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[2ba]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[2ad]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[2a3]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
</UL>

<P><STRONG><a name="[2c5]"></a>USB_OTG_ActiveRemoteWakeup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[d5]"></a>USB_OTG_UngateClock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[2c6]"></a>USB_OTG_StopDevice</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[2d5]"></a>USB_OTG_GetEPStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_GetEPStatus
</UL>

<P><STRONG><a name="[2c7]"></a>USB_OTG_SetEPStatus</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_SetEPStatus
</UL>

<P><STRONG><a name="[293]"></a>DCD_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[29e]"></a>DCD_EP_Open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[2ce]"></a>DCD_EP_Close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>

<P><STRONG><a name="[2a2]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[2a0]"></a>DCD_EP_Tx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[296]"></a>DCD_EP_Stall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[2ab]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2d1]"></a>DCD_EP_Flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[2a9]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2d2]"></a>DCD_DevConnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[2d3]"></a>DCD_DevDisconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[2d4]"></a>DCD_GetEPStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetEPStatus
</UL>

<P><STRONG><a name="[2d6]"></a>DCD_SetEPStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetEPStatus
</UL>

<P><STRONG><a name="[292]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usb_bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[294]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2bc]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[2be]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevConnect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ActiveRemoteWakeup
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[2e3]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[2de]"></a>get_fat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfreeCluandSec
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[2df]"></a>put_fat</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1ec]"></a>f_mount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::init()
</UL>

<P><STRONG><a name="[1e5]"></a>f_open</STRONG> (Thumb, 308 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createfile(const char*)
</UL>

<P><STRONG><a name="[1e2]"></a>f_read</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numln(const char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readln(FIL*, unsigned char*, unsigned*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[205]"></a>f_write</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, unsigned char*, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
</UL>

<P><STRONG><a name="[2f1]"></a>f_sync</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1e6]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, unsigned char*, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numln(const char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::catln(const char*, unsigned, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createfile(const char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1fd]"></a>f_lseek</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, unsigned char*, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numln(const char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::catln(const char*, unsigned, unsigned short)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int, short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::readSD(const char*, void*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1f1]"></a>f_opendir</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numFiles(const char*)
</UL>

<P><STRONG><a name="[1f2]"></a>f_readdir</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numFiles(const char*)
</UL>

<P><STRONG><a name="[207]"></a>f_stat</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileInf(const char*, FILINFO*)
</UL>

<P><STRONG><a name="[1df]"></a>f_getfree</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUfatfreesize(const char*, unsigned long long*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUfatsize(const char*, unsigned long long*)
</UL>

<P><STRONG><a name="[2f3]"></a>f_getfreeCluandSec</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2f4]"></a>f_truncate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1f5]"></a>f_unlink</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::del(const char*)
</UL>

<P><STRONG><a name="[1e8]"></a>f_mkdir</STRONG> (Thumb, 402 bytes, Stack size 104 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createdir(const char*)
</UL>

<P><STRONG><a name="[2f5]"></a>f_chmod</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2f6]"></a>f_utime</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2f7]"></a>f_rename</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2ee]"></a>disk_initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[2ed]"></a>disk_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[2da]"></a>disk_read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2d9]"></a>disk_write</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2dd]"></a>disk_ioctl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2ef]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[439]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, int, unsigned char, unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::readXBee(unsigned char*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>

<P><STRONG><a name="[2f8]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[a2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::freeIndexMatrix(unsigned char)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::freeAll()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::freeIndex()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, int, unsigned char, unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::clearFinishArray()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getIndexFIFO()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::getIndexLIFO()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setDestinationParams(strpacketXBee*, const char*, const char*, unsigned char, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::setOriginParams(strpacketXBee*, const char*, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>

<P><STRONG><a name="[a1]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBee::flush()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txZBStatusResponse()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::treatData()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::txStatusResponse()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::parse_message(unsigned char*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::rxData(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMb7076
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet()
</UL>

<P><STRONG><a name="[ba]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printIntegerInBase
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::print_disk_info()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExternalTime
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspRTC::getTime()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_packets()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_var_temp(float*, float, char*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_var_Ult()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_setuppacket()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[2ff]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[300]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2fe]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[84]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[43b]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b2]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::checkNewProgram()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::upload_firmware()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_ID()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::request_bootlist()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::delete_firmware()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSeed()
</UL>

<P><STRONG><a name="[8c]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1f7]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::catln(const char*, unsigned, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
</UL>

<P><STRONG><a name="[115]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, unsigned char*, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::writeSD(const char*, const char*, int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathcuttail(char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::create(const char*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_received()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareaexistframe(const char*)
</UL>

<P><STRONG><a name="[144]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::indexOf(const char*, const char*, unsigned)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExternalTimeStr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::analyserecframe(char*, unsigned char)
</UL>

<P><STRONG><a name="[147]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
</UL>

<P><STRONG><a name="[2f9]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[305]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[43c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::new_firmware_end()
</UL>

<P><STRONG><a name="[43d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[2fa]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[43e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[308]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8a]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[30a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[30d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[301]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2fd]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[30e]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[30f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[86]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2fc]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[440]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[443]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[444]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[445]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[309]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[312]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[311]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[316]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[c5]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_std_dev()
</UL>

<P><STRONG><a name="[303]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trantocentigradefloat
</UL>

<P><STRONG><a name="[317]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[447]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[31a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>

<P><STRONG><a name="[31d]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>

<P><STRONG><a name="[448]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trantocentigradefloat
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>

<P><STRONG><a name="[449]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trantocentigradefloat
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_delay(unsigned short)
</UL>

<P><STRONG><a name="[31e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[319]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[31c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trantocentigradefloat
</UL>

<P><STRONG><a name="[31f]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[88]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[44a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[44b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[318]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[eb]"></a>CmdResp1Error</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ef]"></a>FindSCR</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[f4]"></a>SDEnWideBus</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[f8]"></a>CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[10e]"></a>IsCardProgramming</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[fb]"></a>CmdResp6Error</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sdio_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[112]"></a>atohexpart(char*, unsigned char, unsigned long*)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigitzpp(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspXBeeCore::sendhandleresponse(char*, unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareaexistframe(const char*)
</UL>

<P><STRONG><a name="[113]"></a>isxdigitzpp(char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, waspxbeecore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohexpart(char*, unsigned char, unsigned long*)
</UL>

<P><STRONG><a name="[72]"></a>__sti___14_WaspEEPROM_cpp_3961584c</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, waspeeprom.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> waspeeprom.o(.init_array)
</UL>
<P><STRONG><a name="[73]"></a>__sti___13_WaspFLASH_cpp_4620997f</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, waspflash.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> waspflash.o(.init_array)
</UL>
<P><STRONG><a name="[74]"></a>__sti___11_WaspPWR_cpp_3d17e4d9</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasppwr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wasppwr.o(.init_array)
</UL>
<P><STRONG><a name="[75]"></a>__sti___11_WaspRTC_cpp_719c396c</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasprtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wasprtc.o(.init_array)
</UL>
<P><STRONG><a name="[1e4]"></a>codelink(char*)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::openFile(FIL*, const char*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::numFiles(const char*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createdir(const char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createfile(const char*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFileInf(const char*, FILINFO*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::del(const char*)
</UL>

<P><STRONG><a name="[1e1]"></a>f_readln(FIL*, unsigned char*, unsigned*)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::catln(const char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[76]"></a>__sti___10_WaspSD_cpp_eb126f29</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> waspsd.o(.init_array)
</UL>
<P><STRONG><a name="[1f8]"></a>pathcuttail(char*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::deldirall(const char*)
</UL>

<P><STRONG><a name="[1f4]"></a>getFileInf(const char*, FILINFO*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, waspsd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codelink(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getAttributes(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isDir(const char*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::isFile(const char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaspSD::getFileSize(const char*)
</UL>

<P><STRONG><a name="[77]"></a>__sti___14_WaspSensor_cpp_4c707246</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspsensor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> waspsensor.o(.init_array)
</UL>
<P><STRONG><a name="[78]"></a>__sti___13_WaspUtils_cpp_5acae417</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wasputils.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wasputils.o(.init_array)
</UL>
<P><STRONG><a name="[79]"></a>__sti___15_WaspXBee802_cpp_3ca8cb33</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspxbee802.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> waspxbee802.o(.init_array)
</UL>
<P><STRONG><a name="[7a]"></a>__sti___12_WaspXBee_cpp_647e1be3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waspxbee.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> waspxbee.o(.init_array)
</UL>
<P><STRONG><a name="[257]"></a>trantocentigradefloat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dingke_smbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trantocentigradefloat &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614ObjectTemp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMlx90614AmbientTemp
</UL>

<P><STRONG><a name="[26a]"></a>SysTick_Config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dingke_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[26e]"></a>zppSetSysClock</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, dingke_sysclkchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = zppSetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zppSystemInit
</UL>

<P><STRONG><a name="[286]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[284]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a]"></a>USBD_SetupStage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_DataOutStage</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_DataInStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_Resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_Suspend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_SOF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2a5]"></a>USBD_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2a8]"></a>USBD_GetDescriptor</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2aa]"></a>USBD_SetFeature</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2ac]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b3]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b2]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ae]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[2b1]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleOutEP_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2bb]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[2d8]"></a>move_window</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfreeCluandSec
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2db]"></a>sync</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2e0]"></a>remove_chain</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[2e1]"></a>create_chain</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2e2]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2e4]"></a>dir_next</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[2e5]"></a>dir_read</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2e6]"></a>dir_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[2e8]"></a>dir_remove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[2e9]"></a>create_name</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2f2]"></a>get_fileinfo</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2ea]"></a>follow_path</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[2eb]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[2ec]"></a>chk_mounted</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfreeCluandSec
</UL>

<P><STRONG><a name="[2e7]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2dc]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[2f0]"></a>validate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[320]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[31b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[70]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
